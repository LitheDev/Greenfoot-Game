#BlueJ class context
comment0.target=BedroomWorld
comment0.text=\r\n\ Synopsis\:\ The\ University\ student\ finds\ that\ they\ have\ procrastinated\ too\ much\ and\ are\ now\ on\ a\r\n\ time\ crunch\ for\ their\ assignments.\ Luckily\ for\ them\ time\ seems\ to\ move\ slower\ when\ they're\ bored\!\r\n\ The\ student\ must\ collect\ the\ boring\ socks\ around\ their\ room\ so\ they\ have\ more\ time\ to\ reflect\ on\r\n\ their\ assignment\ and\ get\ a\ high\ distinction\!\ Be\ careful\ though,\ the\ physical\ embodiment\ of\ fun\r\n\ seeks\ to\ distract\ the\ university\ student.\ If\ this\ embodiment\ catches\ the\ student,\ they\ will\ lose\r\n\ 1\ focus\ point\!\ If\ they\ lose\ all\ 3,\ time\ will\ fly\ by\ and\ they\ will\ fail\ their\ assignment.\r\n\r\n\ Name\:\ @N\ Y\ @1/08/2022\r\n\ \r\n\ Win\ Conditions\:\ Standard\ Mode\:\ Collect\ 100\ socks\ (Game\ will\ end\ once\ 100\ socks\ are\ collected)\r\n\ Endless\ Mode\:\ Collect\ at\ least\ 100\ socks\ before\ losing\ all\ focus\ points\r\n\ \r\n\ Lose\ Conditions\:\ Lose\ all\ 3\ focus\ points\ before\ collecting\ the\ amount\ of\ socks\ specified\ in\ the\r\n\ win\ criteria\r\n\ \r\n\ Sounds\:\ deathsound.mp3\ -\ Created\ by\ N\ Y\ gamelost.mp3\ -\ Created\ by\ N\ Y\ gamewon.mp3\ -\ Created\ by\ N\r\n\ Y\r\n\ \r\n\ Notes\ -\ All\ get/set/show\ methods\ were\ learned\ from\ Module\ 4\ -\ Most\ methods\ used\ were\ a\ mixture\ of\r\n\ self-experimentation\ using\ methods\ learned\ in\ modules\ throughout\ the\ course\r\n
comment1.params=
comment1.target=BedroomWorld()
comment1.text=\r\n\ Constructor\ BedRoomWorld\ -\ Contains\ initial\ values\ for\ BedRoomWorld\ class\ object\ World\ is\r\n\ 800x600\ cells,\ where\ every\ cell\ is\ just\ 1\ pixel.\ Background\ created\ by\ Natalie\ Young\ (Gimp\r\n\ 2.10.18)\r\n
comment10.params=
comment10.target=void\ showScore()
comment10.text=\r\n\ Method\ showScore\ -\ Displays\ Total\ Score\ (Top\ Left),\ uses\ method\ getScore\ to\ get\ current\ score\r\n
comment11.params=
comment11.target=int\ getScore()
comment11.text=\r\n\ Method\ getScore\ -\ Gets\ current\ value\ of\ int\ score\ and\ returns\ it\r\n
comment12.params=newScore
comment12.target=void\ setScore(int)
comment12.text=\r\n\ Method\ setScore\ -\ Takes\ parameter\ newScore\ and\ applies\ to\ score\ variable\r\n
comment13.params=
comment13.target=void\ showLevel()
comment13.text=\r\n\ Method\ showLevel\ -\ Shows\ current\ level\ (bottom-right),\ uses\ method\ getLevel\ to\ get\ current\r\n\ level\r\n
comment14.params=
comment14.target=int\ getLevel()
comment14.text=\r\n\ Method\ getLevel\ -\ Gets\ current\ value\ of\ int\ level\ and\ returns\ it\r\n
comment15.params=newLevel
comment15.target=void\ setLevel(int)
comment15.text=\r\n\ Method\ setLevel\ -\ Takes\ parameter\ newLevel\ and\ applies\ to\ level\ variable\r\n
comment16.params=
comment16.target=void\ showGoal()
comment16.text=\r\n\ Method\ showGoal\ -\ Shows\ Goal\ (top-middle),\ uses\ method\ getGoal\ to\ get\ current\ goal\r\n
comment17.params=
comment17.target=int\ getGoal()
comment17.text=\r\n\ Method\ getGoal\ -\ Gets\ current\ value\ of\ int\ goal\ and\ returns\ it\r\n
comment18.params=newGoal
comment18.target=void\ setGoal(int)
comment18.text=\r\n\ Method\ setGoal\ -\ Takes\ parameter\ newGoal\ and\ applies\ to\ goal\ variable\r\n
comment19.params=
comment19.target=void\ showWinCriteria()
comment19.text=\r\n\ Method\ showWinCriteria\ -\ Displays\ win\ criteria\ (Bottom\ Middle),\ uses\ method\ getWinCriteria\ to\r\n\ get\ current\ goal\r\n
comment2.params=
comment2.target=void\ act()
comment2.text=\r\n\ Method\ act\ -\ Methods\ &\ commands\ to\ be\ initiated\ per\ act\ cycle\r\n
comment20.params=
comment20.target=int\ getWinCriteria()
comment20.text=\r\n\ Method\ getWinCriteria\ -\ Gets\ current\ value\ of\ int\ winCriteria\ and\ returns\ it\r\n
comment21.params=newWinCriteria
comment21.target=void\ setWinCriteria(int)
comment21.text=\r\n\ Method\ setWinCriteria\ -\ Takes\ parameter\ newWinCriteria\ and\ applies\ to\ winCriteria\ variable\r\n
comment22.params=
comment22.target=void\ showLives()
comment22.text=\r\n\ Method\ showLives\ -\ Shows\ lives\ (bottom-right),\ uses\ getLives\ to\ get\ current\ life\ count\r\n
comment23.params=
comment23.target=int\ getLives()
comment23.text=\r\n\ Method\ getLives\ -\ returns\ current\ value\ of\ lives\ int\ variable\r\n
comment24.params=newLives
comment24.target=void\ setLives(int)
comment24.text=\r\n\ Method\ setLives\ -\ Takes\ parameter\ newLives\ and\ applies\ to\ lives\ variable\r\n
comment25.params=
comment25.target=void\ showTime()
comment25.text=\r\n\ Method\ showTime\ -\ Shows\ timer\ (top-right),\ uses\ method\ getTime\ to\ get\ current\ time\r\n
comment26.params=
comment26.target=int\ getTime()
comment26.text=\r\n\ Method\ getTime\ -\ returns\ current\ value\ of\ time\ int\ variable\r\n
comment27.params=newTime
comment27.target=void\ setTime(int)
comment27.text=\r\n\ Method\ setTime\ -\ Takes\ parameter\ newTime\ and\ applies\ to\ time\ variable\r\n
comment28.params=
comment28.target=void\ countTime()
comment28.text=\r\n\ countTime\ -\ Countdown\ timer\ that\ ends\ at\ 0,\ if\ time\ is\ less\ or\ equal\ to\ 0,\ a\ life\ is\ lost\r\n
comment29.params=
comment29.target=void\ checkGameOver()
comment29.text=\r\n\ Method\ checkGameOver\ -\ Calls\ gameWon\ or\ gameLost\ methods\ depending\ on\ which\ criteria\ is\ met\r\n\ and\ ends\ the\ game\ Added\ endless\ mode\ so\ game\ continues\ after\ collecting\ 100\ socks\r\n
comment3.params=
comment3.target=void\ prepare()
comment3.text=\r\n\ Method\ prepare\ -\ Command\ is\ run\ once\ at\ the\ start,\ adds\ player\ object\ to\ game\ at\ coordinates\r\n\ 400,300.\ Runs\ nextLevel()\ to\ prepare\ scoring\ elements\r\n
comment30.params=
comment30.target=void\ gameLost()
comment30.text=\r\n\ Method\ gameLost\ -\ Displays\ loss\ message\ and\ total\ score\r\n
comment31.params=
comment31.target=void\ gameWon()
comment31.text=\r\n\ Method\ gameWon\ -\ Displays\ win\ message\ and\ total\ score\r\n
comment32.params=p
comment32.target=void\ randomSocks(int)
comment32.text=\r\n\ Method\ randomSocks\ -\ Socks\ will\ appear\ every\ (p)\ out\ of\ 100\ act\ cycles\ Socks\ will\ appear\ in\r\n\ random\ locations\r\n
comment33.params=points
comment33.target=void\ addScore(int)
comment33.text=\r\n\ Method\ addScore\ -\ Adds\ parameter\ points\ to\ score\ variable\ (Also\ subtracts\ from\ goal)\r\n
comment4.params=
comment4.target=void\ nextLevel()
comment4.text=\r\n\ nextLevel\ -\ Prepares\ the\ level\ once\ goal\ from\ previous\ level\ is\ met\r\n
comment5.params=
comment5.target=void\ prepareGoal()
comment5.text=\r\n\ Method\ prepareGoal\ -\ Prepares\ the\ goal\ for\ the\ level\ (Goal\ is\ how\ many\ socks\ are\ required\ to\r\n\ progress\ to\ next\ level)\ Goal\ will\ be\:\ A\ random\ number\ between\ 1\ and\ the\ current\ level\ +\ A\r\n\ random\ number\ between\ 1\ and\ 5\r\n
comment6.params=
comment6.target=void\ prepareSocks()
comment6.text=\r\n\ Method\ prepareSocks\ -\ Prepares\ the\ socks\ randomly\ at\ the\ beginning\ of\ the\ level\ (between\ 4\r\n\ and\ 11)\r\n
comment7.params=
comment7.target=void\ prepareEnemy()
comment7.text=\r\n\ Method\ prepareEnemy\ -\ Prepares\ enemies\ randomly\ for\ the\ level\ randomly\ between\ 0\ and\ current\r\n\ level\ /\ 2\ (Will\ not\ produce\ more\ than\ 5\ enemies)\ Enemies\ will\ spawn\ away\ from\ the\ centre\ of\r\n\ the\ map\r\n
comment8.params=
comment8.target=void\ removeEnemy()
comment8.text=\r\n\ Method\ removeEnemy\ -\ Removes\ enemies\r\n
comment9.params=
comment9.target=void\ showHud()
comment9.text=\r\n\ Method\ showHud\ -\ Shows\ all\ HUD\ elements\ -\ Score/Level/Goal/Lives/Timer/winCriteria\ (Learned\r\n\ in\ SCU\ Module\ 4))\r\n
numComments=34
